/* Nick's Grid Css
    * -Reusable grid code */

* {
    /* Change to border-box, In the future I would like to create the same thing for flexbox. */
    box-sizing: border-box;
}

/* Grid measurements:
    * 960px wide including 12 gutters (half gutters on both edges)
    * 60px columns (12)
    * 20px gutters (two half-gutters + 11 full gutters, so 12 total)
    * |  [] [] [] [] [] [] [] [] [] [] [] []  |
    * For smaller screens, we always want 20px of padding on either side,
    * so 20 + 960 + 20 => 1000px */

.row {
    max-width: 1000px;
    padding-left: 20px;
    padding-right: 20px;
    margin: 0 auto;
}

/* Clearfix:
    * The first ruleset forces the height of each row to expand
    * to the height of its tallest child element. That means that
    * rows will vertically contin all their content. */

.row::before,
.row::after {
    display: table;
    content: '';
}

/* The second ruleset, with clear: both;, is a clearfix, and it
    * ensures that any content that comes after the row will act 
    * as though the preceding row was in the normal flow, instead 
    * of butting up against the top of the row container. */

.row::after {
    clear: both;
}

.col-3,
.col-4,
.col-6,
.col-12 {
    float: left;
    /* Gutters:
     * Each column is padded by half-a-gutter on each side,
     *
     * Half a gutter is 10px, 10/960 (context) = 1.041666%
     *
     */
    padding-left: 1.04166666%;
    padding-right: 1.04166666%;
}

/* Mobile defaults */

.col-3,
.col-4,
.col-6,
.col-12 {
    width: 100%;
}

/* Non-mobile, grid */

@media only screen and (min-width: 640px) {

    /* 3 columns, 3/12 in % */
    .col-3 {
        width: 25%;
    }

    /* 4 columns */
    .col-4 {
        width: 33.33%;
    }

    /* 6 columns */
    .col-6 {
        width: 50%;
    }

    /* 12 columns */
    .col-12 {
        width: 100%;
    }
}